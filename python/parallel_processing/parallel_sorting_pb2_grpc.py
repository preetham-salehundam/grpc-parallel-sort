# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import parallel_sorting_pb2 as parallel__sorting__pb2


class ParallelSortingStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.compare = channel.unary_unary(
        '/parallelsorting.ParallelSorting/compare',
        request_serializer=parallel__sorting__pb2.Tuple.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Result.FromString,
        )
    self.get_min = channel.unary_unary(
        '/parallelsorting.ParallelSorting/get_min',
        request_serializer=parallel__sorting__pb2.NIL.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Result.FromString,
        )
    self.get_max = channel.unary_unary(
        '/parallelsorting.ParallelSorting/get_max',
        request_serializer=parallel__sorting__pb2.NIL.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Result.FromString,
        )
    self.swap = channel.unary_unary(
        '/parallelsorting.ParallelSorting/swap',
        request_serializer=parallel__sorting__pb2.Tuple.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Result.FromString,
        )
    self.remote_sort = channel.unary_stream(
        '/parallelsorting.ParallelSorting/remote_sort',
        request_serializer=parallel__sorting__pb2.NIL.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Data.FromString,
        )
    self.check_if_busy = channel.unary_unary(
        '/parallelsorting.ParallelSorting/check_if_busy',
        request_serializer=parallel__sorting__pb2.NIL.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Status.FromString,
        )
    self.process_data = channel.stream_stream(
        '/parallelsorting.ParallelSorting/process_data',
        request_serializer=parallel__sorting__pb2.Data.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Data.FromString,
        )
    self.start_connection = channel.unary_unary(
        '/parallelsorting.ParallelSorting/start_connection',
        request_serializer=parallel__sorting__pb2.NIL.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Status.FromString,
        )
    self.end_connection = channel.unary_unary(
        '/parallelsorting.ParallelSorting/end_connection',
        request_serializer=parallel__sorting__pb2.NIL.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Status.FromString,
        )
    self.get_partial_sorted_data = channel.unary_stream(
        '/parallelsorting.ParallelSorting/get_partial_sorted_data',
        request_serializer=parallel__sorting__pb2.NIL.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Data.FromString,
        )
    self.connect_to = channel.unary_unary(
        '/parallelsorting.ParallelSorting/connect_to',
        request_serializer=parallel__sorting__pb2.Address.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Status.FromString,
        )
    self.forward_data_to_peer = channel.stream_unary(
        '/parallelsorting.ParallelSorting/forward_data_to_peer',
        request_serializer=parallel__sorting__pb2.Data.SerializeToString,
        response_deserializer=parallel__sorting__pb2.NIL.FromString,
        )
    self.input_data = channel.stream_unary(
        '/parallelsorting.ParallelSorting/input_data',
        request_serializer=parallel__sorting__pb2.Data.SerializeToString,
        response_deserializer=parallel__sorting__pb2.NIL.FromString,
        )
    self.fetch_result_from_peer = channel.unary_stream(
        '/parallelsorting.ParallelSorting/fetch_result_from_peer',
        request_serializer=parallel__sorting__pb2.NIL.SerializeToString,
        response_deserializer=parallel__sorting__pb2.Data.FromString,
        )


class ParallelSortingServicer(object):
  """Interface exported by the server.
  """

  def compare(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_min(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_max(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def swap(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def remote_sort(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def check_if_busy(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def process_data(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def start_connection(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def end_connection(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_partial_sorted_data(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def connect_to(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def forward_data_to_peer(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def input_data(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def fetch_result_from_peer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ParallelSortingServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'compare': grpc.unary_unary_rpc_method_handler(
          servicer.compare,
          request_deserializer=parallel__sorting__pb2.Tuple.FromString,
          response_serializer=parallel__sorting__pb2.Result.SerializeToString,
      ),
      'get_min': grpc.unary_unary_rpc_method_handler(
          servicer.get_min,
          request_deserializer=parallel__sorting__pb2.NIL.FromString,
          response_serializer=parallel__sorting__pb2.Result.SerializeToString,
      ),
      'get_max': grpc.unary_unary_rpc_method_handler(
          servicer.get_max,
          request_deserializer=parallel__sorting__pb2.NIL.FromString,
          response_serializer=parallel__sorting__pb2.Result.SerializeToString,
      ),
      'swap': grpc.unary_unary_rpc_method_handler(
          servicer.swap,
          request_deserializer=parallel__sorting__pb2.Tuple.FromString,
          response_serializer=parallel__sorting__pb2.Result.SerializeToString,
      ),
      'remote_sort': grpc.unary_stream_rpc_method_handler(
          servicer.remote_sort,
          request_deserializer=parallel__sorting__pb2.NIL.FromString,
          response_serializer=parallel__sorting__pb2.Data.SerializeToString,
      ),
      'check_if_busy': grpc.unary_unary_rpc_method_handler(
          servicer.check_if_busy,
          request_deserializer=parallel__sorting__pb2.NIL.FromString,
          response_serializer=parallel__sorting__pb2.Status.SerializeToString,
      ),
      'process_data': grpc.stream_stream_rpc_method_handler(
          servicer.process_data,
          request_deserializer=parallel__sorting__pb2.Data.FromString,
          response_serializer=parallel__sorting__pb2.Data.SerializeToString,
      ),
      'start_connection': grpc.unary_unary_rpc_method_handler(
          servicer.start_connection,
          request_deserializer=parallel__sorting__pb2.NIL.FromString,
          response_serializer=parallel__sorting__pb2.Status.SerializeToString,
      ),
      'end_connection': grpc.unary_unary_rpc_method_handler(
          servicer.end_connection,
          request_deserializer=parallel__sorting__pb2.NIL.FromString,
          response_serializer=parallel__sorting__pb2.Status.SerializeToString,
      ),
      'get_partial_sorted_data': grpc.unary_stream_rpc_method_handler(
          servicer.get_partial_sorted_data,
          request_deserializer=parallel__sorting__pb2.NIL.FromString,
          response_serializer=parallel__sorting__pb2.Data.SerializeToString,
      ),
      'connect_to': grpc.unary_unary_rpc_method_handler(
          servicer.connect_to,
          request_deserializer=parallel__sorting__pb2.Address.FromString,
          response_serializer=parallel__sorting__pb2.Status.SerializeToString,
      ),
      'forward_data_to_peer': grpc.stream_unary_rpc_method_handler(
          servicer.forward_data_to_peer,
          request_deserializer=parallel__sorting__pb2.Data.FromString,
          response_serializer=parallel__sorting__pb2.NIL.SerializeToString,
      ),
      'input_data': grpc.stream_unary_rpc_method_handler(
          servicer.input_data,
          request_deserializer=parallel__sorting__pb2.Data.FromString,
          response_serializer=parallel__sorting__pb2.NIL.SerializeToString,
      ),
      'fetch_result_from_peer': grpc.unary_stream_rpc_method_handler(
          servicer.fetch_result_from_peer,
          request_deserializer=parallel__sorting__pb2.NIL.FromString,
          response_serializer=parallel__sorting__pb2.Data.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'parallelsorting.ParallelSorting', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
